syntax = "proto3";

service TorrentService {
    rpc GetTorrent (TorrentRequest) returns (TorrentResponse);
    rpc RegisterPeer (PeerRequest) returns (PeerResponse);
    rpc SearchFile (SearchFileRequest) returns (SearchFileResponse);
    rpc UploadFile (UploadFileRequest) returns (UploadFileResponse);
    rpc GetFile (GetFileRequest) returns (GetFileResponse);
    rpc UnregisterPeer (DisconnectPeerRequest) returns (PeerResponse);
}

message TorrentRequest {
    string peer_id = 1;
    string peer_ip = 2;  // IP del peer que solicita el torrent
}

message TorrentResponse {
    string torrent_data = 1;  // Datos del torrent, que incluye la IP del peer
    string tracker_ip = 2;
    string tracker_port = 3;
}

message PeerRequest {
    string peer_id = 1;   // ID del peer
    string peer_ip = 2;   // IP del peer
    repeated File files = 3;  // Lista de archivos que tiene el peer
}

message PeerResponse {
    string status = 1;     // Ej: "Success", "Error"
    string message = 2;    // Mensaje opcional para detalles adicionales
    repeated File updated_files = 3; // Archivos actualizados del peer
}

message File {
    string file_name = 1;
    int64 file_size = 2;   // Tama침o del archivo (int64 para archivos grandes)
    string file_type = 3;   // Ej: "video", "audio", etc.
    string file_hash = 4;   // Hash para verificar la integridad del archivo
}

message SearchFileRequest {
    string file_name = 1;
}

message SearchFileResponse {
    repeated PeerInfo peers = 1;  // Lista de peers que tienen el archivo
}

message UploadFileRequest {
    string peer_ip = 1;      // IP del peer que sube el archivo
    string file_name = 2;    // Nombre del archivo
    int64 file_size = 3;     // Tama침o del archivo (int64 para archivos grandes)
}

message UploadFileResponse {
    string status = 1;       // Ej: "Success", "Error"
    string peer_id = 2;      // Peer que subi칩 el archivo, opcional
}

message GetFileRequest {
    string file_name = 1;
}

message GetFileResponse {
    repeated PeerInfo peers = 1;  // Lista de peers que tienen el archivo o fragmentos
}

message PeerInfo {
    string peer_id = 1;   // ID del peer
    string peer_ip = 2;   // IP del peer
    int32 peer_port = 3;  // Puerto del peer para facilitar la conexi칩n
}

message DisconnectPeerRequest {
    string peer_id = 1;  // ID del peer
    string peer_ip = 2;  // IP del peer
}

service PeerFileService {
    rpc GetFile (GetFileRequest) returns (UploadFileResponse);
}